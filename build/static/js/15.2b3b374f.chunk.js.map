{"version":3,"sources":["redux/actions/UserActions.js","views/app-views/clients/edit-profile/index.js"],"names":["fetchUsers","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","response","users","wrap","_context","prev","next","type","actionTypes","axios","get","sent","data","payload","t0","message","stop","_x","apply","arguments","deleteUser","userId","_ref2","_callee2","_context2","delete","concat","_x2","fetchUser","_ref3","_callee3","user","_context3","_x3","mapDispatchToProps","withRouter","connect","state","props","history","id","useParams","_useState","useState","_useState2","_slicedToArray","loading","setLoading","useEffect","handleSubmit","values","Promise","resolve","setTimeout","push","_jsx","Card","title","children","className","Spin","size","_jsxs","Form","onFinish","Item","name","label","rules","required","initialValue","Input","username","email","phone","website","Button","htmlType"],"mappings":"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","file":"static/js/15.2b3b374f.chunk.js","sourcesContent":["\r\n\r\nimport * as actionTypes from '../constants/Users';\r\nimport axios from \"axios\";\r\n\r\n\r\nexport const fetchUsers = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.FETCH_USERS_REQUEST });\r\n\r\n        try {\r\n            const response = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n            const users = response.data;\r\n            dispatch({ type: actionTypes.FETCH_USERS_SUCCESS, payload: users });\r\n        } catch (error) {\r\n            dispatch({ type: actionTypes.FETCH_USERS_ERROR, payload: error.message });\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const deleteUser = (userId) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.DELETE_USER_REQUEST });\r\n\r\n        try {\r\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${userId}`);\r\n            dispatch({ type: actionTypes.DELETE_USER_SUCCESS, payload: userId });\r\n        } catch (error) {\r\n            dispatch({ type: actionTypes.DELETE_USER_ERROR, payload: error.message });\r\n        }\r\n    };\r\n};\r\n\r\n\r\n\r\nexport const fetchUser = (userId) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.FETCH_USER_REQUEST });\r\n\r\n        try {\r\n            const response = await axios.get(`https://jsonplaceholder.typicode.com/users/${userId}`);\r\n            const user = response.data;\r\n            dispatch({ type: actionTypes.FETCH_USER_SUCCESS, payload: user });\r\n        } catch (error) {\r\n            dispatch({ type: actionTypes.FETCH_USER_ERROR, payload: error.message });\r\n        }\r\n    };\r\n};\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Card, Form, Input, Button, Spin } from 'antd';\r\nimport { fetchUser } from 'redux/actions/UserActions';\r\nimport { withRouter, useParams } from 'react-router-dom';\r\n\r\nconst EditProfile = (props) => {\r\n    const { user, fetchUser, history } = props;\r\n    const { id } = useParams();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchUser(id);\r\n    }, [fetchUser, id]);\r\n\r\n    const handleSubmit = async (values) => {\r\n        setLoading(true);\r\n        await new Promise((resolve) => setTimeout(resolve, 3000));\r\n        setLoading(false);\r\n        history.push('/app/clients/list');\r\n    };\r\n\r\n    if (!user) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <Card title=\"Edit Profile\">\r\n            {loading ? (\r\n                <div className=\"text-center\">\r\n                    <Spin size=\"large\" />\r\n                </div>\r\n            ) : (\r\n                <Form onFinish={handleSubmit}>\r\n                    <Form.Item\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        rules={[{ required: true }]}\r\n                        initialValue={user.name}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"username\"\r\n                        label=\"Username\"\r\n                        rules={[{ required: true }]}\r\n                        initialValue={user.username}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"email\"\r\n                        label=\"Email\"\r\n                        rules={[{ required: true, type: 'email' }]}\r\n                        initialValue={user.email}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"phone\"\r\n                        label=\"Phone\"\r\n                        rules={[{ required: true }]}\r\n                        initialValue={user.phone}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"website\"\r\n                        label=\"Website\"\r\n                        rules={[{ required: true }]}\r\n                        initialValue={user.website}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Save change\r\n                    </Button>\r\n                </Form>\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.users.user,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchUser,\r\n};\r\n\r\nexport default withRouter(\r\n    connect(mapStateToProps, mapDispatchToProps)(EditProfile)\r\n);\r\n"],"sourceRoot":""}